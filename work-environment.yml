#!/usr/bin/ansible-playbook
---
#
# Customize a shell environment for OpenShift operations work.
#
# Intended for Red Hat owned AWS EC2 instances serving as "bastion" hosts.
#
- hosts: all
  vars:
    # XDG Base Directories
    # https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
    xdg_data_home:   "{{ ansible_env.XDG_DATA_HOME   | default(ansible_user_dir + '/.local/share', true) }}"
    xdg_cache_home:  "{{ ansible_env.XDG_CACHE_HOME  | default(ansible_user_dir + '/.cache', true) }}"
    xdg_config_home: "{{ ansible_env.XDG_CONFIG_HOME | default(ansible_user_dir + '/.config', true) }}"

    # Use this for blockinfile tasks
    blockinfile_marker: "# (work-environment) {mark} ANSIBLE MANAGED BLOCK"
    ocm_config_dir: "{{ xdg_config_home }}/ocm"
    ocm_environments: ["integration", "staging", "production"]
    virtualenv_root: "{{ ansible_user_dir }}/env"
    work_environment_dir: "{{ xdg_data_home }}/work-environment"
  tasks:

  - name: Synchronize bin directory
    synchronize:
      src: bin/
      dest: "{{ ansible_user_dir }}/{{ bindir }}/"
      links: yes

  - name: Synchronize v3/bin directory
    synchronize:
      src: v3/bin/
      dest: "{{ ansible_user_dir }}/{{ bindir }}/"
      links: yes
    when: install_v3_files is defined

  - name: Synchronize work-environment directory
    synchronize:
      src: work-environment/
      dest: "{{ work_environment_dir }}/"

  - name: Edit tmux configuration
    blockinfile:
      path: "{{ ansible_user_dir }}/.tmux.conf"
      block: "{{ lookup('template', 'tmux.conf.j2') }}"
      marker: "{{ blockinfile_marker }}"
      create: yes

  # Cached cluster information

  - name: Create v3 cluster cache directory
    file:
      path: "{{ xdg_cache_home }}/sre/clusters/v3"
      state: directory
    when: install_v3_files is defined

  - name: Create v4 cluster cache directories
    file:
      path: "{{ xdg_cache_home }}/ocm/{{ item }}/clusters"
      state: directory
    loop: "{{ ocm_environments }}"

  - name: Create user directories
    file:
      path: "{{ item }}"
      state: directory
    loop:
    - "{{ bash_aliases_d }}"
    - "{{ bash_profile_d }}"
    - "{{ bash_completion_d }}"

  - name: Edit .bashrc script
    blockinfile:
      path: "{{ ansible_user_dir }}/.bashrc"
      block: "{{ lookup('template', 'bashrc.j2') }}"
      marker: "{{ blockinfile_marker }}"

  - name: Edit profile script
    blockinfile:
      path: "{{ ansible_user_dir }}/{{ profile }}"
      block: "{{ lookup('template', 'profile.j2') }}"
      marker: "{{ blockinfile_marker }}"

  - name: Edit bash_completion script
    blockinfile:
      path: "{{ ansible_user_dir }}/.bash_completion"
      block: "{{ lookup('template', 'bash_completion.j2') }}"
      marker: "{{ blockinfile_marker }}"
      create: yes

  - name: Synchronize bash_aliases directory
    synchronize:
      src: bash_aliases/
      dest: "{{ bash_aliases_d }}/"

  - name: Synchronize bash_profile directory
    synchronize:
      src: bash_profile/
      dest: "{{ bash_profile_d }}/"

  - name: Synchronize bash_completion directory
    synchronize:
      src: bash_completion/
      dest: "{{ bash_completion_d }}/"

  - name: Override PATH in crontab
    cron:
      env: yes
      name: PATH
      value: "{{ ansible_user_dir }}/{{ bindir }}:/usr/bin:/bin"

  - name: Schedule daily cluster cache update
    cron:
      name: "Daily {{ item }} cluster cache update"
      special_time: daily
      user: "{{ ansible_user_id }}"
      job: "update-{{ item }}-cluster-cache"
    when: item == 'v4' or install_v3_files is defined
    with_items:
    - v3
    - v4

  - name: Edit SSH configuration
    blockinfile:
      path: "{{ ansible_user_dir }}/.ssh/config"
      block: "{{ lookup('template', 'ssh_config.j2') }}"
      marker: "{{ blockinfile_marker }}"
      create: yes
    when: "'bastions' not in group_names"

  - name: Install Python modules for srelogin
    when: "'bastions' not in group_names"
    block:

    - name: Install requests-html module
      pip:
        name: requests-html
        executable: pip3
        state: latest

    - name: Download Chromium for requests-html
      command: "{{ ansible_user_dir }}{{ bindir }}/pyppeteer-install"
      args:
        creates: "{{ xdg_data_home }}/pyppeteer/local-chromium"

  # Install OpenShift client tools

  - name: Download OpenShift v4 client
    unarchive:
      remote_src: yes
      src: https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
      dest: "{{ ansible_user_dir }}/{{ bindir }}"

  - name: Generate bash completion code for OpenShift v4 client
    shell:
      cmd: "{{ ansible_user_dir }}/{{ bindir }}/oc completion bash > {{ bash_completion_d }}/oc"

  - name: Look up latest OpenShift Cluster Manager release
    uri:
      url: https://api.github.com/repos/openshift-online/ocm-cli/releases/latest
    register: ocm_release_latest

  - name: Determine OpenShift Cluster Manager download URL
    set_fact:
      ocm_download_url: "{{ item.browser_download_url }}"
    when: item.name == "ocm-linux-amd64"
    loop: "{{ ocm_release_latest.json.assets }}"

  - name: Download OpenShift Cluster Manager client
    get_url:
      url: "{{ ocm_download_url }}"
      dest: "{{ ansible_user_dir }}/{{ bindir }}/ocm"
      mode: u=rwx,g=rx,o=rx

  - name: Generate bash completion code for OpenShift Cluster Manager client
    shell:
      cmd: "{{ ansible_user_dir }}/{{ bindir }}/ocm completion > {{ bash_completion_d }}/ocm"

  # Skip this on bastion hosts because it's already installed.
  - when: "'bastions' not in group_names"
    block:

    - name: Look up latest osdctl release
      uri:
        url: https://api.github.com/repos/openshift/osd-utils-cli/releases/latest
      register: osdctl_release_latest

    - name: Determine osdctl download URL
      set_fact:
        osdctl_download_url: "{{ item.browser_download_url }}"
      when: item.name | regex_search('^osdctl-linux')
      loop: "{{ osdctl_release_latest.json.assets }}"

    - name: Download osdctl client
      get_url:
        url: "{{ osdctl_download_url }}"
        dest: "{{ ansible_user_dir }}/{{ bindir }}/osdctl"
        mode: u=rwx,g=rx,o=rx

    - name: Generate bash completion code for osdctl
      shell:
        cmd: "{{ ansible_user_dir }}/{{ bindir }}/osdctl completion bash > {{ bash_completion_d }}/osdctl"

  # OpenShift Cluster Manager client configuration

  - name: Store v4 cluster secrets on encrypted mount
    when: "'bastions' in group_names"
    block:

    - name: Check for .private-encrypted directory
      stat:
        path: "{{ ansible_user_dir }}/.private-encrypted"
      register: private_encrypted_dir

    # The .private-encrypted directory is encrypted, whereas .private is the
    # unencrypted FUSE mount.  If .private-encrypted exists, assume .private
    # is mounted and let the playbook fail if not.

    - name: Create ocm directory on encrypted mount
      file:
        path: "{{ ansible_user_dir }}/.private/ocm"
        state: directory
      when:
      - private_encrypted_dir.stat.isdir is defined
      - private_encrypted_dir.stat.isdir

    - name: Link ocm configuration directory to encrypted mount
      file:
        src: "{{ ansible_user_dir }}/.private/ocm"
        path: "{{ ocm_config_dir }}"
        state: link
      when:
      - private_encrypted_dir.stat.isdir is defined
      - private_encrypted_dir.stat.isdir

  - name: Create OpenShift Cluster Manager environment directories
    file:
      path: "{{ ocm_config_dir }}/{{ item }}/clusters"
      state: directory
    loop: "{{ ocm_environments }}"

  - name: Touch OpenShift Cluster Manager configuration files
    copy:
      content: |
        {
        }
      dest: "{{ ocm_config_dir }}/{{ item }}/config"
      force: no
    loop: "{{ ocm_environments }}"

  - name: Link default OpenShift Cluster Manager file
    file:
      src: "{{ ocm_config_dir }}/{{ ocm_default_environment }}/config"
      path: "{{ ansible_user_dir }}/.ocm.json"
      state: link

  # Powerline

  - name: Set up Powerline
    when: "'bastions' in group_names"
    block:

    - name: Add virtualenv binaries to PATH
      lineinfile:
        path: "{{ ansible_user_dir }}/.bashrc"
        line: "export PATH=\"$PATH:{{ virtualenv_root }}/bin\""
        create: yes

    - name: Install powerline-status pip package
      pip:
        name: powerline-status
        virtualenv: "{{ virtualenv_root }}"

    - name: Source powerline when starting bash
      lineinfile:
        path: "{{ ansible_user_dir }}/.bashrc"
        line: "source {{ virtualenv_root }}/lib/python2.7/site-packages/powerline/bindings/bash/powerline.sh"
        create: yes

    - name: Source powerline when starting tmux
      lineinfile:
        path: "{{ ansible_user_dir }}/.tmux.conf"
        line: "source {{ virtualenv_root }}/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf"
        create: yes

  - pause:
      prompt: |

        Obtain login tokens for ocm environments:

          production  : https://cloud.redhat.com/openshift/token
                        ocm-production login --url production --token ...

          staging     : https://qaprodauth.cloud.redhat.com/openshift/token
                        ocm-staging login --url staging --token ...

          integration : https://qaprodauth.cloud.redhat.com/openshift/token?env=integration
                        ocm-integration login --url integration --token ...

      seconds: 1
